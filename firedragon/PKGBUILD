# Maintainer: dr460nf1r3 <dr460nf1r3 at garudalinux dot org>
# Co-Maintainer: FGD

pkgname=firedragon
_pkgname=FireDragon
pkgver=11.7.1
pkgrel=5
pkgdesc="Floorp fork build using custom branding & settings"
url='http://dr460nf1r3.org'
arch=('x86_64')
license=('MPL2')
depends=(dbus
    dbus-glib
    ffmpeg
    gtk3
    libpulse
    libxss
    libxt
    mime-types
    nss
    ttf-font)
makedepends=(cbindgen
    clang
    diffutils
    dump_syms
    imagemagick
    imake
    inetutils
    jack
    lld
    llvm
    mesa
    nasm
    nodejs
    python
    rust
    unzip
    wasi-compiler-rt
    wasi-libc
    wasi-libc++
    wasi-libc++abi
    xorg-server-xvfb
    yasm
    zip)
optdepends=('hunspell-en_US: Spell checking, American English'
    'libnotify: Notification integration'
    'networkmanager: Location detection via available WiFi networks'
    'plasma5-applets-window-appmenu: Appmenu for Plasma only'
    'profile-sync-daemon: Load the browser profile into RAM'
    'pulseaudio: Audio support'
    'searx: Searching the web using a locally running searX instance'
    'speech-dispatcher: Text-to-Speech'
    'whoogle: Searching the web using a locally running Whoogle instance')
options=(!debug
    !emptydirs
    !lto
    !makeflags
    !strip)
backup=("usr/lib/${pkgname}/${pkgname}.cfg"
    "usr/lib/${pkgname}/distribution/policies.json")
source=(https://github.com/Floorp-Projects/Floorp/archive/refs/tags/v"${pkgver}".tar.gz
    "floorp-core::git+https://github.com/Floorp-Projects/Floorp-core"
    "floorp-l10n-central::git+https://github.com/Floorp-Projects/Unified-l10n-central"
    "common::git+https://gitlab.com/dr460nf1r3/common.git"
    "settings::git+https://gitlab.com/dr460nf1r3/settings.git"
    "${pkgname}.desktop")
sha256sums=('f267ea51dbbe869f3674da1985611bc34a712a8c8c9d677feeb796fc9335d47d'
    'SKIP'
    'SKIP'
    'SKIP'
    'SKIP'
    '53d3e743f3750522318a786befa196237892c93f20571443fdf82a480e7f0560')

prepare() {
    # Floorp's shenanigan to make the build work without cloning the whole
    # fucking huge git source (puts submodules' content in place)
    mv -f "${srcdir}"/floorp-core/* ./Floorp-"${pkgver}"/floorp
    mv -f "${srcdir}"/floorp-l10n-central/* ./Floorp-"${pkgver}"/floorp/browser/locales/l10n-central

    rm -rf "${srcdir}/mozbuild"
    mkdir "${srcdir}/mozbuild"

    cd Floorp-"${pkgver}" || exit
    cat >../mozconfig <<END
ac_add_options --with-app-basename=${_pkgname}
ac_add_options --with-app-name=${pkgname}

ac_add_options --disable-crashreporter
ac_add_options --enable-proxy-bypass-protection
ac_add_options --with-branding=browser/branding/${pkgname}
ac_add_options --with-l10n-base=${PWD@Q}/floorp/browser/locales/l10n-central

ac_add_options --enable-application=browser
mk_add_options MOZ_OBJDIR=${PWD@Q}/obj

ac_add_options --disable-bootstrap
ac_add_options --disable-elf-hack
ac_add_options --enable-default-toolkit=cairo-gtk3-wayland
ac_add_options --enable-hardening
ac_add_options --enable-linker=lld
ac_add_options --enable-optimize="-O3"
ac_add_options --enable-release
ac_add_options --enable-rust-simd
ac_add_options --prefix=/usr
ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot
export MOZ_INCLUDE_SOURCE_INFO=1
export RUSTC_OPT_LEVEL=2

# Branding
ac_add_options --allow-addon-sideload
ac_add_options --enable-unverified-updates
ac_add_options --enable-update-channel=release
ac_add_options --with-distribution-id=org.garudalinux
ac_add_options --with-unsigned-addon-scopes=app,system
export MOZILLA_OFFICIAL=1
export MOZ_APP_REMOTINGNAME=${pkgname}
export MOZ_DATA_REPORTING=
export MOZ_REQUIRE_SIGNING=
export MOZ_TELEMETRY_REPORTING=

# System libraries
ac_add_options --with-system-nspr
ac_add_options --with-system-nss

# Features
ac_add_options --disable-crashreporter
ac_add_options --disable-debug
ac_add_options --disable-tests
ac_add_options --disable-updater
ac_add_options --enable-alsa
ac_add_options --enable-jack
ac_add_options --enable-jxl
END

    local _patches_dir
    _patches_dir="${srcdir}/common/patches"

    local _floorp_patches_dir
    _floorp_patches_dir="${srcdir}/common/patches/floorp/"

    _patch() {
        printf 'Patching %s ...\n' "$1"
        patch -Np1 -i "$1"
    }

    # Remove some pre-installed addons that might be questionable
    _patch "${_floorp_patches_dir}"/remove_addons.patch

    # Stop some undesired requests (https://gitlab.com/librewolf-community/browser/common/-/issues/10)
    _patch "${_floorp_patches_dir}"/sed-patches/stop-undesired-requests.patch

    # Assorted patches
    _patch "${_floorp_patches_dir}"/urlbarprovider-interventions.patch

    # Allow uBlockOrigin to run in private mode by default, without user intervention.
    _patch "${_floorp_patches_dir}"/allow-ubo-private-mode.patch

    # Add custom uBO assets (on first launch only)
    _patch "${_floorp_patches_dir}"/custom-ubo-assets-bootstrap-location.patch

    # Allows hiding the password manager (from the lw pref pane) / via a pref
    _patch "${_floorp_patches_dir}"/hide-passwordmgr.patch

    # Update privacy preferences
    _patch "${_patches_dir}"/custom/privacy-preferences.patch

    rm -f "${srcdir}"/common/source_files/mozconfig
    cp -r "${srcdir}"/common/source_files/* ./
}

build() {
    cd Floorp-"${pkgver}" || exit

    export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip
    export MOZBUILD_STATE_PATH="${srcdir}/mozbuild"
    export MOZ_ENABLE_FULL_SYMBOLS=1
    export MOZ_NOSPAM=1

    # Malloc_usable_size is used in various parts of the codebase
    CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
    CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"

    # LTO needs more open files
    ulimit -n 4096

    # Do 3-tier PGO
    echo "Building instrumented browser..."
    cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-profile-generate=cross
END
    ./mach build

    echo "Profiling instrumented browser..."
    ./mach package
    LLVM_PROFDATA=llvm-profdata \
        JARLOG_FILE="${PWD}/jarlog" \
        xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
        ./mach python build/pgo/profileserver.py

    stat -c "Profile data found (%s bytes)" merged.profdata
    test -s merged.profdata

    stat -c "Jar log found (%s bytes)" jarlog
    test -s jarlog

    echo "Removing instrumented browser..."
    ./mach clobber

    echo "Building optimized browser..."
    cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-lto=cross,full
ac_add_options --enable-profile-use=cross
ac_add_options --with-pgo-profile-path=${PWD@Q}/merged.profdata
ac_add_options --with-pgo-jarlog=${PWD@Q}/jarlog
END
    ./mach build

    echo "Building symbol archive..."
    ./mach buildsymbols
}

package() {
    cd Floorp-"${pkgver}" || exit

    DESTDIR="${pkgdir}" ./mach install

    rm "${pkgdir}/usr/lib/${pkgname}/pingsender"

    local vendorjs="${pkgdir}/usr/lib/${pkgname}/browser/defaults/preferences/vendor.js"
    install -Dvm644 /dev/stdin "${vendorjs}" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);
END

    local distini="${pkgdir}/usr/lib/${pkgname}/distribution/distribution.ini"
    install -Dvm644 /dev/stdin "${distini}" <<END
[Global]
id=${pkgname}
version=${pkgver}-${pkgrel}
about=${pkgdesc}

[Preferences]
app.distributor=garudalinux
app.distributor.channel=${pkgname}
app.partner.garudalinux=garudalinux
END

    # Use system certificates
    local nssckbi="${pkgdir}/usr/lib/${pkgname}/libnssckbi.so"
    if [[ -e "${nssckbi}" ]]; then
        ln -srfv "${pkgdir}/usr/lib/libnssckbi.so" "${nssckbi}"
    fi

    # Make native messaging work
    ln -s "/usr/lib/mozilla/native-messaging-hosts" "${pkgdir}/usr/lib/${pkgname}/native-messaging-hosts"

    # Application icons
    for i in 16 32 48 64 128; do
        install -Dvm644 browser/branding/${pkgname}/default$i.png \
            "${pkgdir}/usr/share/icons/hicolor/${i}x${i}/apps/${pkgname}.png"
    done
    install -Dvm644 browser/branding/${pkgname}/content/about-logo.png \
        "${pkgdir}/usr/share/icons/hicolor/192x192/apps/${pkgname}.png"

    # Install a wrapper to avoid confusion about binary path
    install -Dvm755 /dev/stdin "${pkgdir}/usr/bin/${pkgname}" <<END
#!/bin/sh
exec /usr/lib/${pkgname}/${pkgname} "\$@"
END

    # All the needed configuration files
    install -Dvm644 "../${pkgname}.desktop" "${pkgdir}/usr/share/applications/${pkgname}.desktop"
    install -Dvm644 "${srcdir}/settings/${pkgname}.cfg" "${pkgdir}/usr/lib/${pkgname}/${pkgname}.cfg"
    install -Dvm644 "${srcdir}/settings/${pkgname}.psd" "${pkgdir}/usr/share/psd/browsers/${pkgname}."
    install -Dvm644 "${srcdir}/settings/defaults/pref/local-settings.js" "${pkgdir}/usr/lib/${pkgname}/defaults/pref/local-settings.js"
    install -Dvm644 "${srcdir}/settings/distribution/policies.json" "${pkgdir}/usr/lib/${pkgname}/distribution/policies.json"
}
