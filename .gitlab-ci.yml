---
stages: [checks, update-pkgbuilds, bump-version, deploy]

variables:
  BUILD_HOST: builds.garudalinux.org
  BUILD_PORT: 223
  BUILD_USER: gitlab
  GIT_AUTHOR_EMAIL: ci@garudalinux.org
  GIT_AUTHOR_NAME: GitLab CI
  GIT_STRATEGY: clone
  REPO_URL: $CI_SERVER_PROTOCOL://gitlab-ci-token:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git

check-lint:
  # Check the PKGBUILD and install files for common bash anti-patterns and issues
  stage: checks
  image: alpine:latest
  inherit:
    variables: false
  script:
    - apk add --no-cache --upgrade bash npm py3-pip shellcheck shfmt
    - pip install yamllint
    - npm install -g markdownlint-cli
    - bash .ci/lint.sh || true # this will likely always fail at the beginning
  rules:
    - if: $BUMPVER != "1"

check-pr-commitizen:
  # Check the current commit message for compliance with commitizen
  stage: checks
  image: alpine:latest
  inherit:
    variables: false
  script:
    - apk add --no-cache --upgrade py3-pip
    - pip install -U commitizen
    - cz check --message "$CI_COMMIT_MESSAGE" >/tmp/cz_check || true # why does it return 1 if its actually 0?
    - grep "successful" /tmp/cz_check # ugly hack to workaround the above issue
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $UPDATE_DOCKER != "1"

fetch-pkgbuilds:
  # This basically updates the version in the PKGBUILD and commits it
  # in case no major updates were detected
  stage: update-pkgbuilds
  image: alpine:latest
  script:
    - apk add --no-cache --upgrade bash curl git jq shfmt sudo
    - git config --global user.name "$GIT_AUTHOR_NAME"
    - git config --global user.email "$GIT_AUTHOR_EMAIL"
    - bash .ci/fetch-pkgbuild.sh
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $BUMPVER == "1"

update-versions:
  # Update the VERSIONS file if needed, not triggering any of the pipelines with it
  image: alpine:latest
  stage: bump-version
  script:
    - apk add --no-cache --upgrade bash git
    - git config --global user.name "$GIT_AUTHOR_NAME"
    - git config --global user.email "$GIT_AUTHOR_EMAIL"
    - bash .ci/update-versions.sh
  rules:
    - changes:
        - "*/PKGBUILD"
      if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $UPDATE_DOCKER != "1"

build-docker:
  # Used to deploy a new base Docker image for building purposes
  # this one runs once per day via pipeline schedules
  stage: deploy
  image: docker:24-cli
  services:
    - name: docker:24-dind
      alias: docker-daemon
  before_script:
    - docker info
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .ci/assets
    - docker push "$CI_REGISTRY_IMAGE:latest"
  tags: ["dind"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker-daemon:2375/
    DOCKER_TLS_CERTDIR: ""
  rules:
    - if: $UPDATE_DOCKER == "1"

build-package:
  # This only runs on the default branch and when the commit message contains [deploy *]
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  stage: deploy
  image: docker:24-cli
  services:
    - name: docker:24-dind
      alias: docker-daemon
  before_script:
    - docker info
  script:
    - apk add --no-cache --upgrade bash
    - bash .ci/build-package.sh
  tags: ["dind"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker-daemon:2375/
    DOCKER_TLS_CERTDIR: ""
  artifacts:
    paths:
      - "*/*.pkg.tar.zst"
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /\[deploy.*\]/ && $BUMPVER != "1" && $UPDATE_DOCKER != "1"

deploy-package:
  # This only runs on the default branch and when the commit message contains [deploy *]
  # and is used to deploy the package to the build server.
  stage: deploy
  image: alpine:latest
  script:
    # - '[[ -z ${DEPLOY_KEY+x} ]] && echo "No deploy key available, backing off!" && exit 1'
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$DEPLOY_KEY" >>~/.ssh/id_ed25519
    - chmod 400 ~/.ssh/id_ed25519
    - apk add --no-cache --upgrade bash openssh
    - echo "Deploying $CI_PROJECT_NAME to $BUILD_HOST"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /\[deploy.*\]/ && $BUMPVER != "1" && $UPDATE_DOCKER != "1"
