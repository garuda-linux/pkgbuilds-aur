#!/usr/bin/env bash

KNOWN_VARIABLE_LIST=(CI_PKGBUILD_SOURCE CI_GIT_COMMIT CI_PKGBUILD_TIMESTAMP)
EXCLUDE_FILES=(.CI .git .gitignore)

# Get a list of all the packages in the repo
function UTIL_GET_PACKAGES() {
    local -n GET_PACKAGES_ARRAY=${1:-PACKAGES}
    mapfile -t GET_PACKAGES_ARRAY < <(find . -mindepth 1 -type d -not -path '*/.*' -printf '%P\n')
}

function UTIL_PRUNE_UNKNOWN_VARIABLES() {
    local -n PRUNE_VARIABLES=${1:-VARIABLES}
    for key in "${!PRUNE_VARIABLES[@]}"; do
        if [[ ! " ${KNOWN_VARIABLE_LIST[*]} " == *" ${key} "* ]]; then
            unset "PRUNE_VARIABLES[$key]"
        fi
    done
}

function UTIL_READ_VARIABLES_FROM_FILE() {
    local file=$1
    local -n READ_ASSOC_ARRAY=${2:-VARIABLES}
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ "$line" =~ ^[[:space:]]*([a-zA-Z0-9_]+)[[:space:]]*=[[:space:]]*(.*)[[:space:]]*$ ]]; then
            READ_ASSOC_ARRAY["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
        fi
    done < "$file"
}

function UTIL_WRITE_VARIABLES_TO_FILE() {
    local file=$1
    local -n WRITE_ASSOC_ARRAY=${2:-VARIABLES}

    # Clear the file before writing variables
    true > "$file"

    for key in "${!WRITE_ASSOC_ARRAY[@]}"; do
        echo "$key=${WRITE_ASSOC_ARRAY[$key]}" >> "$file"
    done
}

function UTIL_WRITE_KNOWN_VARIABLES_TO_FILE() {
    local file=$1
    local -n WRITE_ASSOC_ARRAY=${2:-VARIABLES}

    # Clear the file before writing variables
    true > "$file"

    for key in "${!WRITE_ASSOC_ARRAY[@]}"; do
        if [[ ! " ${KNOWN_VARIABLE_LIST[*]} " == *" ${key} "* ]]; then
            continue;
        fi
        echo "$key=${WRITE_ASSOC_ARRAY[$key]}" >> "$file"
    done
}

function UTIL_READ_MANAGED_PACAKGE() {
    local target_file="./${1}/.CI/config"
    if [ -f "$target_file" ]; then
        local -n READ_MANAGED_ASSOC_ARRAY=${2:-VARIABLES}
        UTIL_READ_VARIABLES_FROM_FILE "$target_file" READ_MANAGED_ASSOC_ARRAY

        # Check if any variable at all was read
        if [ ${#READ_MANAGED_ASSOC_ARRAY[@]} -ne 0 ]; then
            UTIL_PRUNE_UNKNOWN_VARIABLES READ_MANAGED_ASSOC_ARRAY
            READ_MANAGED_ASSOC_ARRAY[PKGBASE]="$1"
            return 0
        fi
    fi
    return 1
}

# Extract both the normal url and the fragment
UTIL_GET_URI_PARTS() {
	local netfile=$1

	local fragment=${netfile#*#}
	if [[ "$fragment" = "$netfile" ]]; then
		fragment=""
	fi
	fragment=${fragment%\?*}

    local url="${netfile%%#*}"
    url="${url%%\?*}"

	printf "%s\n%s" "$url" "$fragment"
}

# $1: VARIABLES
function UTIL_FETCH_VCS_COMMIT() {
    local -n VARIABLES_FETCH_VCS_COMMIT=${1:-VARIABLES}
    local pkgbase="${VARIABLES_FETCH_VCS_COMMIT[PKGBASE]}"

    # Check if .SRCINFO exists. We can't work with a -git package without it
    if ! [ -f "$pkgbase/.SRCINFO" ]; then
        return 1
    fi

    # Parse the first source from the .SRCINFO file
    # Example output: https://github.com/LinusDierheimer/fastfetch.git#branch=dev
    local source fragment ref
    source=$(grep -m 1 -oP '\ssource\s=\s.*git\+\K.*$' "$pkgbase/.SRCINFO" || true)
    ref=HEAD

    if [ -z "$source" ]; then
        # Unable to find source in .SRCINFO
        # This does not mean that we are at fault
        # So we return 0 to indicate that we should remove the VCS indication from the package
        return 0
    fi

    IFS=$'\n' read -rd '' source fragment <<< "$(UTIL_GET_URI_PARTS "$source")"

    if [ -n "$fragment" ]; then
        local type
        type="${fragment%%=*}"
        # This heuristic is used to check if the fragment is a branch.
        # If the fragment is not a branch, it must be a commit hash or a tag.
        # In those cases, we don't need to update VCS, because we assume
        # the package maintainer will update the PKGBUILD accordingly.
        if [ "$type" != "branch" ]; then
            return 0
        fi
        ref="${fragment##*=}"
    fi

    local _NEWEST_COMMIT
    if ! _NEWEST_COMMIT="$(git ls-remote "$source" "$ref" | grep -m1 -oP '\w+(?=\t\w)')"; then
        return 1
    fi
    if [ -z "$_NEWEST_COMMIT" ]; then
        return 1
    fi

    printf "%s" "$_NEWEST_COMMIT"
}

# $1: VARIABLES
# $2: new commit
function UTIL_UPDATE_VCS_COMMIT() {
    local -n VARIABLES_UPDATE_VCS_COMMIT=${1:-VARIABLES}
    local new_commit="$2"

    if [ -n "$new_commit" ]; then
        VARIABLES_UPDATE_VCS_COMMIT[CI_GIT_COMMIT]="$new_commit"
    fi
}

# $1: Output associative array
# $2: array of pkgbases on AUR
function UTIL_FETCH_AUR_TIMESTAMPS() {
    local -n OUTPUT_ASSOC_ARRAY=$1
    local pkgbases=()

    read -ra pkgbases <<< "$2"

    # Check size of array
    if [ ${#pkgbases[@]} -eq 0 ]; then
        return 0
    fi
    
    local API_URL="https://aur.archlinux.org/rpc/v5/info"
    local first=1

    # Loop through $2 but via index numbers. If index != 0, append &arg[]= to the URL
    for i in "${!pkgbases[@]}"; do
        if [ "$first" -eq 1 ]; then
            API_URL+="?arg[]=${pkgbases[$i]}"
            first=0
        else
            API_URL+="&arg[]=${pkgbases[$i]}"
        fi

        # Every 150 packages or at the end of the array, fetch the timestamps
        if [ $((i % 150)) -eq 149 ] || [ "$i" -eq "$((${#pkgbases[@]} - 1))" ]; then
            local response
            echo "Info: Fetching AUR timestamps for $((i + 1))/${#pkgbases[@]} packages..."
            echo "Info: $API_URL"
            if response="$(curl -s "$API_URL")"; then
                local -a res_timestamps
                mapfile -t res_timestamps <<< "$(echo "$response" | jq -r '.results[].LastModified')"
                local -a res_pkgbases
                mapfile -t res_pkgbases <<< "$(echo "$response" | jq -r '.results[].PackageBase')"

                # Loop through timestamps and pkgbases and add them to the associative array
                for j in "${!res_timestamps[@]}"; do
                    OUTPUT_ASSOC_ARRAY["${res_pkgbases[$j]}"]="${res_timestamps[$j]}"
                done
            fi
            API_URL="https://aur.archlinux.org/rpc/v5/info"
            first=1
        fi
    done
}

# $1: VARIABLES
# $2: new timestamp
function UTIL_UPDATE_AUR_TIMESTAMP() {
    local -n VARIABLES_AUR_TIMESTAMP=${1:-VARIABLES}
    local new_timestamp="$2"

    if [ "$new_timestamp" != "0" ]; then
        VARIABLES_AUR_TIMESTAMP[CI_PKGBUILD_TIMESTAMP]="$new_timestamp"
    fi
}

# Generate exclude list for rsync, diff, etc.
# $1: prefix
# $2: Extra ignores
function UTIL_GET_EXCLUDE_LIST() {
    local prefix="$1"
    local -a extra_ignores=()
    read -ra extra_ignores <<< "${2:-}"

    local -a exclude_list=("${EXCLUDE_FILES[@]}" "${extra_ignores[@]}")

    local -a exclude_output=()
    for i in "${exclude_list[@]}"; do
        exclude_output+=("${prefix}")
        exclude_output+=("${i}")
    done

    printf "%s" "${exclude_output[*]}"
}